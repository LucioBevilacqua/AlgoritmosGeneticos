import random


def generar_poblacion(cromosoma):

    heredera = []
    for a in cromosoma:
        heredera.append(a[:])

    for i in range(9):
        for j in range(9):
            if heredera[i][j] == 0:
                heredera[i][j] = random.randint(1, 9)
    return heredera


def funcion_objetivo(cromo):

    valores_objetivo = []
    print(cromo)
    for cromosoma in cromo:
        acum = 0
        #por fila
        for fila in cromosoma:
            lista_bin = [0, 0, 0, 0, 0, 0, 0, 0, 0]
            for val in fila:
                lista_bin[val - 1] = 1
            for bit in lista_bin:
                if bit == 0:
                    acum += 1

        #por columna
        for i in range(9):
            columna = []
            for fila in cromosoma:
                columna.append(fila[i])
            lista_bin = [0, 0, 0, 0, 0, 0, 0, 0, 0]
            for val in columna:
                lista_bin[val - 1] = 1
            for bit in lista_bin:
                if bit == 0:
                    acum += 1

        #por subcuadro
        i = 0
        for a in range(3):
            print(acum)
            #para cada subcuadro de la primera columna de subcuadros
            submatriz1 = []
            j = 0
            for val in range(i, i + 3):
                submatriz1.extend(cromosoma[val][j:j + 3])
            print(submatriz1)
            i += 3

            lista_bin = [0, 0, 0, 0, 0, 0, 0, 0, 0]
            for val in submatriz1:
                lista_bin[val - 1] = 1
            for bit in lista_bin:
                if bit == 0:
                    acum += 1

        i = 0
        print acum
        for a in range(3):
            #para cada subcuadro de la segunda columna de subcuadros
            submatriz2 = []
            j = 3
            for val in range(i, i + 2):
                submatriz2.extend(cromosoma[val][j:j + 3])

            i += 3
            lista_bin = [0, 0, 0, 0, 0, 0, 0, 0, 0]
            for val in submatriz2:
                lista_bin[val - 1] = 1
            for bit in lista_bin:
                if bit == 0:
                    acum += 1

        i = 0
        print acum
        for a in range(3):
            #para cada subcuadro de la tercera columna de subcuadros
            submatriz3 = []
            j = 6
            for val in range(i, i + 2):
                submatriz3.extend(cromosoma[val][j:j + 3])

            i += 3
            lista_bin = [0, 0, 0, 0, 0, 0, 0, 0, 0]
            for val in submatriz3:
                lista_bin[val - 1] = 1
            for bit in lista_bin:
                if bit == 0:
                    acum += 1
        print acum
        valores_objetivo.append(acum)

    print(valores_objetivo)


def main():

    pistas1 = [[0, 2, 4, 0, 0, 7, 0, 0, 0], [6, 0, 0, 0, 0, 0, 0, 0, 0],
             [0, 0, 3, 6, 8, 0, 4, 1, 5], [4, 3, 1, 0, 0, 5, 0, 0, 0],
             [5, 0, 0, 0, 0, 0, 0, 3, 2], [7, 9, 0, 0, 0, 0, 0, 6, 0],
            [2, 0, 9, 7, 1, 0, 8, 0, 0], [0, 4, 0, 0, 9, 3, 0, 0, 0],
            [3, 1, 0, 0, 0, 4, 7, 5, 0]]
    pistas2 = []

    op = input("1- caso 1\n2- caso 2")
    poblacion = []

    if op == 1:
        for a in range(16):
            poblacion.append(generar_poblacion(pistas1))
    elif op == 2:
        for b in range(16):
            poblacion.append(generar_poblacion(pistas2))

    funcion_objetivo(poblacion)


if __name__ == '__main__':
    main()
